// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview A flow to select between different GNN models via prompt for cascading delay prediction.
 *
 * - selectGnnModel - A function that handles the GNN model selection process.
 * - SelectGnnModelInput - The input type for the selectGnnModel function.
 * - SelectGnnModelOutput - The return type for the selectGnnModel function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SelectGnnModelInputSchema = z.object({
  airport: z.string().describe('The IATA code of the airport for which to predict delays.'),
  gnnModelSelectionCriteria: z
    .string()
    .describe(
      'Criteria for selecting the GNN model, such as desired accuracy, speed, or specific network conditions.'
    ),
});
export type SelectGnnModelInput = z.infer<typeof SelectGnnModelInputSchema>;

const SelectGnnModelOutputSchema = z.object({
  selectedModel: z.string().describe('The name of the selected GNN model.'),
  justification: z
    .string()
    .describe('Explanation of why this model was selected based on the input criteria.'),
});
export type SelectGnnModelOutput = z.infer<typeof SelectGnnModelOutputSchema>;

export async function selectGnnModel(input: SelectGnnModelInput): Promise<SelectGnnModelOutput> {
  return selectGnnModelFlow(input);
}

const prompt = ai.definePrompt({
  name: 'selectGnnModelPrompt',
  input: {schema: SelectGnnModelInputSchema},
  output: {schema: SelectGnnModelOutputSchema},
  prompt: `You are an expert in Graph Neural Networks (GNNs) applied to airport traffic flow prediction.
Based on the user's criteria, you will select the most appropriate GNN model for predicting cascading delays at a given airport.

Airport: {{{airport}}}
Selection Criteria: {{{gnnModelSelectionCriteria}}}

Consider the following GNN models:
- GCN (Graph Convolutional Network): Suitable for capturing first-order relationships between airports.
- GraphSAGE: Good for handling large graphs and generating embeddings for unseen airports.
- GAT (Graph Attention Network): Useful for assigning different importance weights to neighboring airports based on attention mechanisms.

Reason about which model is most appropriate based on the criteria, and explain your reasoning in the justification field.
Then select the model and set the selectedModel output field.
`,
});

const selectGnnModelFlow = ai.defineFlow(
  {
    name: 'selectGnnModelFlow',
    inputSchema: SelectGnnModelInputSchema,
    outputSchema: SelectGnnModelOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
